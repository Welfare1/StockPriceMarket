version: "3.7"

services:
  airflow-webserver:
    image: apache/airflow:2.6.0
    container_name: airflow-webserver
    restart: always
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    ports:
      - "8081:8080"  # Change le port si n√©cessaire
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
    command: 
      - webserver 
      - docker exec -it airflow-webserver airflow db init

    networks:
      - airflow_network

  airflow-scheduler:
    image: apache/airflow:2.6.0
    container_name: airflow-scheduler
    restart: always
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=sqlite:////opt/airflow/airflow.db
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    volumes:
      - ./dags:/opt/airflow/dags
      - ./plugins:/opt/airflow/plugins
      - ./airflow.db:/opt/airflow/airflow.db
      - ./scripts:/opt/airflow/scripts
    command: scheduler  # Ajouter cette ligne pour lancer le scheduler
    networks:
      - airflow_network

  scraper:
    build: 
      context: .
      dockerfile: scripts/Dockerfile
    image: scraping-image
    container_name: scraper
    restart: always
    environment:
      - MONGO_URI=${MONGO_URI}  # Charge depuis le fichier .env
    networks:
      - airflow_network
    depends_on:
      - mongo  # seulement utile si tu veux tester en local avec l'image mongo

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    volumes:
      - mongo-data:/data/db
    networks:
      - airflow_network

networks:
  airflow_network:
    driver: bridge

volumes:
  mongo-data:
